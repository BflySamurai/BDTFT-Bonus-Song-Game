<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0] = 32 //80 steps per second = 32 steps per beat (150bpm) (1 measures x 4 beats per measure x 32 steps per beat = 128 steps) + any offset to match music
alarm[2] = 64 //alarm for start of music

sub_sprite = 0
my_color = c_white

//physics
direction = 0;
//hspeed = 4;
vspeed = 0;
jump = 0;

//global variable powerup stuff
global.jumpset = 1;     // is how many jump you get when you hit the ground
global.grav = .5;       //gravity 
global.jumpspeed = 9;   //jumpspeed
global.vspeedmax = 15; //max falling speed
global.vspeedmin = 15; //maximum jumping speed
global.invincible = false; //invincible
global.temp_x = obj_camera.x - x //used to make sure the player doesn't move at all while invincible
vtemp = vspeed
htemp = 4

//beat the game alarm
alarm[1] = -1


x_real = x //used to stop any glitching when hitting the ground
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>211</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>Bonus_Song_1</sound>
          </argument>
          <argument>
            <kind>3</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.starcount &gt;= 35
    room_goto(3)
else
    room_goto(2)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//sprite animation

my_color = c_white //default color

if sub_sprite = 0 {
    sub_sprite = 1
    alarm[0] = 20
    if global.invincible = true //make the player flash if they are invincible
        my_color = c_gray
    }
else {
    sub_sprite = 0
    alarm[0] = 12
    if global.invincible = true //make the player flash if they are invincible
        my_color = c_white
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = x_real //used to stop any glitching when hitting the ground

if x &lt; obj_camera.x - global.temp_x //if the player is behind it's default position, make it slowly catch up
    if place_free(x+.5,y)
        x +=.5
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//testing purposes only
//global.invincible = true

if global.invincible = false { //if player is not invincible
    if place_free(x+htemp,y) //if there is not a wall directly to the player's right
        x += htemp //move right
    }
else //if player is invincible
//    x = obj_camera.x - global.temp_x //make sure the player doesn't move at all in the x direction relative to the camera/screen
    x += htemp //move right

x_real = x //used to stop any glitching when hitting the ground

//gravity
if place_free(x,y+1) {
    gravity = global.grav
    }
else {
    gravity = 0
    }
gravity_direction = 270

//limit downward speed
if vspeed&gt;global.vspeedmax
    vspeed = global.vspeedmax
//limit upward upwards    
if vspeed &lt; -global.vspeedmin
    vspeed = -global.vspeedmin
       

//falling
if vspeed &gt; 0 &amp;&amp; place_meeting(x,y+vspeed,obj_block) { //if player is moving down and there is a block directly below
    if global.invincible = false { //if player is not invincible
        vspeed = 0
        jump = global.jumpset
        move_contact(270)
        }
    else //if player is invincible
        if !place_meeting(x,y,obj_block) { //if player is not inside a block
            vspeed = 0
            jump = global.jumpset
            move_contact(270)
            }
    }

//make sure the player gets their jump even when they land perfecly on a block coming in sideways
if position_meeting(x,y+1,obj_block)
    jump = global.jumpset
    
    
//jump
if keyboard_check_pressed(vk_up) &amp;&amp; jump &gt;= 1 {
    vspeed = -global.jumpspeed
    jump -=1
    }
if keyboard_check_released(vk_up) &amp;&amp; vspeed &lt; 0 //if you are still going up and let go of the jump button
    vspeed /= 2 //this makes the jump responsive to how long the jump button is pressed
  
      
//moving up
if vspeed &lt; 0 &amp;&amp; place_meeting(x,y+vspeed,obj_block) //if player is moving up and there is a block directly avobe
    if global.invincible = false { //if you are not invincible
        vspeed = 0
        move_contact(90)
        }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_finish">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[1] = 5
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="40">
      <action>
        <libid>1</libid>
        <id>212</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>Bonus_Song_1</sound>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>221</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_previous_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(spr_player,sub_sprite,x,y,1,1,image_angle,my_color,1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>1</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
